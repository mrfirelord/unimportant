import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import org.mockito.Mockito._
import org.mockito.ArgumentMatchers.{eq => argEq, any}
import org.scalatest.BeforeAndAfterEach
import java.time.{LocalDate, Clock, ZoneId, Instant}
import java.time.format.DateTimeFormatter
import scala.util.{Success, Failure}
import gmot.recon.cdrods.util.Retry

class TransactionPublisherImplTest extends AnyFlatSpec with Matchers with BeforeAndAfterEach {
  
  private val mockAmpsClient = mock(classOf[JsonAmpsClient])
  private val testFailsAmpsTopic = "test.fails.topic"
  private val zoneId = ZoneId.of("UTC")
  private val fixedInstant = Instant.parse("2025-04-23T10:15:30.00Z")
  private val fixedClock = Clock.fixed(fixedInstant, zoneId)
  private val expectedDate = "2025-04-22" // previous business day
  
  var publisher: TransactionPublisherImpl = _
  
  // Sample test data
  val testDate = LocalDate.of(2025, 4, 23)
  val sampleTransaction1 = Transaction(
    refNo = "REF001",
    apNumber = Some("AP001"),
    cusip = Some("CUSIP001"),
    quantity = Some(BigDecimal(100)),
    amount = Some(BigDecimal(1000.50)),
    settlementDate = Some(testDate),
    tradeDate = Some(testDate.minusDays(1)),
    fmuId = Some("FMU001")
  )
  
  val sampleTransaction2 = Transaction(
    refNo = "REF002",
    apNumber = Some("AP002"),
    cusip = Some("CUSIP002"),
    quantity = Some(BigDecimal(200)),
    amount = Some(BigDecimal(2000.75)),
    settlementDate = Some(testDate),
    tradeDate = Some(testDate.minusDays(1)),
    fmuId = Some("FMU002")
  )
  
  val samplePublishedTransaction = PublishedTransaction(
    refNo = "REF001",
    apNumber = Some("AP001"),
    cusip = Some("CUSIP001"),
    quantity = Some(BigDecimal(100)),
    amount = Some(BigDecimal(1000.50)),
    settlementDate = Some(testDate),
    tradeDate = Some(testDate.minusDays(1)),
    fmuId = Some("FMU001"),
    closeOfBusiessDate = expectedDate
  )
  
  override def beforeEach(): Unit = {
    reset(mockAmpsClient)
    publisher = new TransactionPublisherImpl(mockAmpsClient, testFailsAmpsTopic, fixedClock)
  }
  
  "TransactionPublisherImpl" should "publish a list of transactions" in {
    // Arrange
    val transactions = List(sampleTransaction1, sampleTransaction2)
    
    when(mockAmpsClient.publish(argEq(testFailsAmpsTopic), any[String]())).thenReturn(Success(()))
    
    // Act
    publisher.publish(transactions)
    
    // Assert
    verify(mockAmpsClient, times(2)).publish(argEq(testFailsAmpsTopic), any[String]())
  }
  
  it should "publish a single transaction" in {
    // Arrange
    when(mockAmpsClient.publish(argEq(testFailsAmpsTopic), any[String]())).thenReturn(Success(()))
    
    // Act
    publisher.publish(samplePublishedTransaction)
    
    // Assert
    verify(mockAmpsClient).publish(argEq(testFailsAmpsTopic), any[String]())
  }
  
  it should "retry publishing when there's a failure" in {
    // Arrange
    val transactions = List(samplePublishedTransaction)
    val retry = Retry(1, 3, 10) // Start with attempt 1, max 3 attempts, 10ms delay
    
    when(mockAmpsClient.publish(argEq(testFailsAmpsTopic), any[String]()))
      .thenReturn(Failure(new RuntimeException("Test exception")))
      .thenReturn(Success(()))
    
    // Act
    publisher.publish(transactions, 0, retry)
    
    // Assert
    verify(mockAmpsClient, times(2)).publish(argEq(testFailsAmpsTopic), any[String]())
  }
  
  it should "not retry if isLastTry is true" in {
    // Arrange
    val transactions = List(samplePublishedTransaction)
    val retry = Retry(3, 3, 10) // Last try (number equals max)
    
    when(mockAmpsClient.publish(argEq(testFailsAmpsTopic), any[String]()))
      .thenReturn(Failure(new RuntimeException("Test exception")))
    
    // Act
    publisher.publish(transactions, 0, retry)
    
    // Assert
    verify(mockAmpsClient, times(1)).publish(argEq(testFailsAmpsTopic), any[String]())
  }
  
  it should "not publish if retry is over max number" in {
    // Arrange
    val transactions = List(samplePublishedTransaction)
    val retry = Retry(6, 5, 10) // Over max number (6 > 5)
    
    // Act
    publisher.publish(transactions, 0, retry)
    
    // Assert
    verify(mockAmpsClient, never()).publish(any[String](), any[String]())
  }
  
  it should "use double the delay for each retry" in {
    // Arrange
    val transactions = List(samplePublishedTransaction)
    val initialRetry = Retry(1, 3, 10)
    
    when(mockAmpsClient.publish(argEq(testFailsAmpsTopic), any[String]()))
      .thenReturn(Failure(new RuntimeException("Test exception")))
      .thenReturn(Failure(new RuntimeException("Test exception")))
      .thenReturn(Success(()))
    
    // Act
    publisher.publish(transactions, 0, initialRetry)
    
    // Assert
    verify(mockAmpsClient, times(3)).publish(argEq(testFailsAmpsTopic), any[String]())
  }
  
  it should "use Retry.getDefault when no retry is specified" in {
    // Arrange
    val transactions = List(sampleTransaction1, sampleTransaction2)
    
    when(mockAmpsClient.publish(argEq(testFailsAmpsTopic), any[String]())).thenReturn(Success(()))
    
    // Act
    publisher.publish(transactions)
    
    // Assert
    verify(mockAmpsClient, times(2)).publish(argEq(testFailsAmpsTopic), any[String]())
  }
  
  it should "get previous business date correctly" in {
    // We're using a fixed clock for April 23, 2025
    // So the previous business day should be April 22, 2025
    
    // Test through a direct invocation of the private method
    // This is a bit of a hack but useful for testing
    val method = publisher.getClass.getDeclaredMethod("getPrevBusinessDate")
    method.setAccessible(true)
    val result = method.invoke(publisher).asInstanceOf[String]
    
    // Assert
    result should include("2025-04-22")
  }
}